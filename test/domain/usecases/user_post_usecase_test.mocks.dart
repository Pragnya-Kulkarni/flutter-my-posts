// Mocks generated by Mockito 5.0.17 from annotations
// in my_posts/test/domain/usecases/add_user_post_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_posts/core/error/failures.dart' as _i5;
import 'package:my_posts/domain/entities/user_post_entity.dart' as _i6;
import 'package:my_posts/domain/repositories/user_post_repository.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [UserPostRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPostRepository extends _i1.Mock
    implements _i3.UserPostRepository {
  MockUserPostRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.UserPostEntity>>>
      getUserPosts() => (super.noSuchMethod(
              Invocation.method(#getUserPosts, []),
              returnValue: Future<
                      _i2.Either<_i5.Failure, List<_i6.UserPostEntity>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.UserPostEntity>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.UserPostEntity>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.UserPostEntity>> getUserPostsById(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getUserPostsById, [id]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i6.UserPostEntity>>.value(
                      _FakeEither_0<_i5.Failure, _i6.UserPostEntity>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.UserPostEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteUserPostsById(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteUserPostsById, [id]),
              returnValue: Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither_0<_i5.Failure, void>()))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.UserPostEntity>> addUserPost(
          _i6.UserPostEntity? userPostEntity) =>
      (super.noSuchMethod(Invocation.method(#addUserPost, [userPostEntity]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i6.UserPostEntity>>.value(
                      _FakeEither_0<_i5.Failure, _i6.UserPostEntity>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.UserPostEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.UserPostEntity>> updateUserPost(
          _i6.UserPostEntity? userPostEntity) =>
      (super.noSuchMethod(Invocation.method(#updateUserPost, [userPostEntity]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i6.UserPostEntity>>.value(
                      _FakeEither_0<_i5.Failure, _i6.UserPostEntity>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.UserPostEntity>>);
}
