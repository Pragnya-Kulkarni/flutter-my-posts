// Mocks generated by Mockito 5.0.17 from annotations
// in my_posts/test/presentation/cubit/userpost_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_posts/core/error/failures.dart' as _i6;
import 'package:my_posts/core/usecases/usecase.dart' as _i8;
import 'package:my_posts/domain/entities/user_post_entity.dart' as _i7;
import 'package:my_posts/domain/repositories/user_post_repository.dart' as _i2;
import 'package:my_posts/domain/usecases/add_user_post_usecase.dart' as _i10;
import 'package:my_posts/domain/usecases/delete_user_post_usecase.dart' as _i9;
import 'package:my_posts/domain/usecases/get_user_post_usecase.dart' as _i4;
import 'package:my_posts/domain/usecases/update_user_post_usecase.dart' as _i11;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUserPostRepository_0 extends _i1.Fake
    implements _i2.UserPostRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetUserPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserPostUseCase extends _i1.Mock
    implements _i4.GetUserPostUseCase {
  MockGetUserPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserPostRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUserPostRepository_0()) as _i2.UserPostRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.UserPostEntity>>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<
                      _i3.Either<_i6.Failure, List<_i7.UserPostEntity>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i7.UserPostEntity>>()))
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.UserPostEntity>>>);
}

/// A class which mocks [DeleteUserPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteUserPostUseCase extends _i1.Mock
    implements _i9.DeleteUserPostUseCase {
  MockDeleteUserPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserPostRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUserPostRepository_0()) as _i2.UserPostRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(int? id) =>
      (super.noSuchMethod(Invocation.method(#call, [id]),
              returnValue: Future<_i3.Either<_i6.Failure, void>>.value(
                  _FakeEither_1<_i6.Failure, void>()))
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [AddUserPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddUserPostUseCase extends _i1.Mock
    implements _i10.AddUserPostUseCase {
  MockAddUserPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserPostRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUserPostRepository_0()) as _i2.UserPostRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserPostEntity>> call(
          _i7.UserPostEntity? userPostEntity) =>
      (super.noSuchMethod(Invocation.method(#call, [userPostEntity]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.UserPostEntity>>.value(
                      _FakeEither_1<_i6.Failure, _i7.UserPostEntity>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserPostEntity>>);
}

/// A class which mocks [UpdateUserPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserPostUseCase extends _i1.Mock
    implements _i11.UpdateUserPostUseCase {
  MockUpdateUserPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserPostRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUserPostRepository_0()) as _i2.UserPostRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserPostEntity>> call(
          _i7.UserPostEntity? userPostEntity) =>
      (super.noSuchMethod(Invocation.method(#call, [userPostEntity]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.UserPostEntity>>.value(
                      _FakeEither_1<_i6.Failure, _i7.UserPostEntity>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserPostEntity>>);
}
